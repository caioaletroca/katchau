// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch"]
	binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
	@@map("accounts")
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String?  @map("provider_account_id")
	password					 String?
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
	@@map("sessions")
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	@@map("users")
  id            String    @id @default(cuid())
	username			String?		@unique
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
	birth					DateTime?
	bio						String?
	created_at		DateTime   @default(now())
	updated_at		DateTime?   @updatedAt
	deleted_at		DateTime?

  accounts      Account[]
  sessions      Session[]
	followed			Follows[]	@relation("Followed")
	following			Follows[] @relation("Following")
	profile_picture	ProfileImage[]
	posts					Post[]
	comments			Comment[]
	post_likes		PostLike[]
	comment_likes	CommentLike[]
}

model VerificationToken {
	@@map("verification_tokens")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follows {
	@@map("follows")
	followed_id	String
	following_id	String
	followed	User	@relation("Followed", fields: [followed_id], references: [id])
	following	User	@relation("Following", fields: [following_id], references: [id])

	@@id([followed_id, following_id])
}

model Post {
	@@map("posts")
	id	String	@id @default(cuid())
	user_id	String
	description	String?
	created_at	DateTime   @default(now())
	updated_at	DateTime?   @updatedAt
	deleted_at	DateTime?

	user	User	@relation(fields: [user_id], references: [id], onDelete: Cascade)
	images	PostImage[]
	comments	Comment[]
	likes	PostLike[]
}

model Comment {
	@@map("comments")
	id	String @id @default(cuid())
	user_id	String
	post_id	String
	content String
	created_at	DateTime   @default(now())
	updated_at	DateTime?   @updatedAt
	deleted_at	DateTime?

	user	User	@relation(fields: [user_id], references: [id], onDelete: Cascade)
	post	Post	@relation(fields: [post_id], references: [id], onDelete: Cascade)
	likes	CommentLike[]
}

enum ImageOwner {
	User
	Post
}

model ProfileImage {
	@@map("profile_images")
	id	String @id @default(cuid())
	user_id	String
	url	String?
	created_at	DateTime   @default(now())
	updated_at	DateTime?   @updatedAt
	deleted_at	DateTime?

	user	User	@relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PostImage {
	@@map("post_images")
	id	String @id @default(cuid())
	post_id	String
	url	String
	created_at	DateTime   @default(now())
	updated_at	DateTime?   @updatedAt
	deleted_at	DateTime?

	post	Post	@relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostLike {
	@@map("post_likes")
	id	String @id @default(cuid())
	user_id String
	post_id	String
	created_at	DateTime   @default(now())

	user	User	@relation(fields: [user_id], references: [id], onDelete: Cascade)
	post	Post	@relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model CommentLike {
	@@map("comment_likes")
	id	String @id @default(cuid())
	user_id String
	comment_id	String
	created_at	DateTime   @default(now())

	user	User	@relation(fields: [user_id], references: [id], onDelete: Cascade)
	comment	Comment?	@relation(fields: [comment_id], references: [id], onDelete: Cascade)
}
